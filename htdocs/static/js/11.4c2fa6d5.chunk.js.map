{"version":3,"sources":["views/app/view.js"],"names":["Create","translate","context","animatedComponents","makeAnimated","state","form","FormData","required_fields_hs","required_fields","required_fields_labels","editorState","EditorState","createEmpty","isValid","dropdowns","childrens","currentData","getCurrentRecord","userOauth","props","auth","login","axios","get","getPath","location","item","model_id","headers","Authorization","access_token","then","response","setState","data","onEditorStateChange","renderForm","form_","config","pages","path","md","verbose_name","map","field","renderSingleInput","className","Ripple","color","type","onClick","e","handleSubmit","checkboxValue","field_name","renderLabel","includes","label","name","undefined","bind","required","res","console","log","key","wrapperClassName","editorClassName","onChange","updateState","draftToHtml","toolbar","options","size","rows","placeholder","target","value","files","isClearable","updateChildrenList","clearChildrenList","components","selectOptions","getForeignFieldDropdown","depends_on","icon","defaultChecked","depend_on_value","id","renderSelectOption","choices","renderSelectOptionForeignWQ","app_reducer","has","set","append","removeFromRequired","delete","addFromRequired","has_parent","filter","Number","children","list","length","notifyErrorBounce","url","post","notifySuccessBounce","setTimeout","history","push","catch","error","toast","success","transition","Bounce","this","requestDropodowns","forEach","index","addToRequired","title","indexOf","splice","React","Component","contextType","IntlContext","connect","app"],"mappings":"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","file":"static/js/11.4c2fa6d5.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { toast, Bounce } from \"react-toastify\";\n\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\n\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\n\nimport { requestDropodowns } from \"../../redux/actions/app/actions\";\nimport { IntlContext } from \"../../i18n/provider\";\nimport { history } from \"../../history\";\nimport { axios } from \"../../redux/api\";\n\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport \"../../assets/scss/plugins/extensions/editor.scss\";\n\nimport config from \"../../data/config\";\nimport {\n  Button,\n  Card,\n  Row,\n  Col,\n  FormGroup,\n  CustomInput,\n  Input,\n  Label,\n} from \"reactstrap\";\nimport { Check } from \"react-feather\";\n\nimport Checkbox from \"../../components/@vuexy/checkbox/CheckboxesVuexy\";\n\nclass Create extends React.Component {\n  static contextType = IntlContext;\n  translate = this.context.translate;\n\n  animatedComponents = makeAnimated();\n\n  state = {\n    form: new FormData(),\n    required_fields_hs: [],\n    required_fields: [],\n    required_fields_labels: [],\n    editorState: EditorState.createEmpty(),\n    isValid: true,\n    dropdowns: [],\n    childrens: {},\n    currentData: {},\n  };\n\n  componentDidMount() {\n    this.getCurrentRecord();\n    console.log(\"ITEM: \", this.props.location.state.item);\n    this.props.requestDropodowns(); // Request dropdown lists and place in a map\n    const { form } = config.pages[this.getPath()]; // loads lvform to be rendered on view\n    form.forEach((item, index) => {\n      this.addToRequired(item);\n    });\n    const { dropdowns } = this.props.app_reducer;\n    this.setState({ dropdowns });\n  }\n\n  getCurrentRecord = () => {\n    const { userOauth } = this.props.state.auth.login;\n\n    axios\n      .get(\n        `${this.getPath()}s/?case_number=${\n          this.props.location.state.item.model_id\n        }`,\n        {\n          headers: {\n            Authorization: `Bearer ${userOauth.access_token}`,\n          },\n        }\n      )\n      .then((response) => {\n        this.setState({ currentData: response.data });\n      });\n  };\n\n  getPath() {\n    let path = \"lvform\";\n    const MODEL = this.props.location.state.item.title;\n\n    switch (MODEL) {\n      case \"New Task\":\n        return \"task\";\n      case \"New Article\":\n        return \"article\";\n\n      default:\n        path = \"lvform\";\n    }\n    return path;\n  }\n\n  render() {\n    return (\n      <div>\n        <Card className=\"rounded-0 mb-0 px-2\">\n          {/* <CardBody>{this.renderForm()}</CardBody> */}\n        </Card>\n      </div>\n    );\n  }\n\n  onEditorStateChange = (editorState) => {\n    this.setState({ editorState });\n  };\n\n  /**\n   * Action and helper functions\n   */\n  renderForm = () => {\n    const form_ = config.pages[this.props.path];\n\n    return (\n      <Row>\n        <Col md=\"12\">\n          <h4>{this.translate(form_.verbose_name)}</h4>\n          <hr />\n        </Col>\n\n        {form_.form.map((field) => this.renderSingleInput(field))}\n\n        <Col md=\"12\">\n          <div className=\"d-flex justify-content-between\">\n            <div />\n            <Button.Ripple\n              className=\"square\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={(e) => this.handleSubmit()}\n            >\n              {this.translate(\"Submit\")}\n            </Button.Ripple>\n          </div>\n        </Col>\n      </Row>\n    );\n  };\n\n  /**\n   * get checkbox field value from a formdata object\n   * @param {*} field_name\n   * @returns\n   */\n  checkboxValue = (field_name) => {\n    const { form } = this.state;\n    if (form.get(field_name) === \"true\") {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Render a input label verifying it's required bind value and filled value\n   * @param {*} field\n   * @returns\n   */\n  renderLabel = (field) => {\n    if (\n      (!this.state.isValid &&\n        this.state.required_fields_labels.includes(field.label)) ||\n      (!this.state.isValid &&\n        this.state.required_fields.includes(`${field.name}_id`))\n    ) {\n      return (\n        <Label className=\"text-danger\">\n          <strong>* {this.translate(field.label)}</strong>\n        </Label>\n      );\n    } else {\n      if (field.bind !== undefined) {\n        if (field.bind.required === true) {\n          if (this.state.required_fields_labels.includes(field.label))\n            return (\n              <Label className=\"text-danger\">\n                <strong> * {this.translate(field.label)}</strong>\n              </Label>\n            );\n          else {\n            return (\n              <Label>\n                <strong>* {this.translate(field.label)}</strong>\n              </Label>\n            );\n          }\n        } else {\n          return (\n            <Label>\n              <strong> {this.translate(field.label)}</strong>\n            </Label>\n          );\n        }\n      } else {\n        return (\n          <Label>\n            <strong> {this.translate(field.label)}</strong>\n          </Label>\n        );\n      }\n    }\n  };\n\n  /**\n   * Filter and matchs input type and render it's matching components settings\n   * @param {*} field\n   * @returns\n   */\n  renderSingleInput = (field) => {\n    let res = <></>;\n\n    console.log(this.props.path);\n\n    if (\n      field.name === \"case_number\" ||\n      field.name === \"created_by\" ||\n      field.name === \"othercategory\" ||\n      field.name === \"month\" ||\n      field.name === \"response\"\n    ) {\n      return <span key={field.name} />;\n    }\n\n    switch (field.type) {\n      case \"text\":\n        if (field.name === \"text\" && this.props.path === \"article\") {\n          res = (\n            <Col md=\"12\" key={field.name}>\n              {this.renderLabel(field)}\n\n              <Editor\n                wrapperClassName=\"demo-wrapper\"\n                editorClassName=\"demo-editor\"\n                editorState={this.state.editorState}\n                onEditorStateChange={this.onEditorStateChange}\n                onChange={(e) => this.updateState(field.name, draftToHtml(e))}\n                toolbar={{\n                  options: [\n                    \"inline\",\n                    \"blockType\",\n                    \"fontSize\",\n                    \"fontFamily\",\n                    \"list\",\n                    \"textAlign\",\n                    \"colorPicker\",\n                    \"link\",\n                    \"embedded\",\n                    \"emoji\",\n                    \"image\",\n                    \"remove\",\n                    \"history\",\n                  ],\n                }}\n              />\n            </Col>\n          );\n        } else {\n          const size = field.name === \"text\" ? 12 : 6;\n          res = (\n            <Col md={size} key={field.name}>\n              {/* <Label>{this.translate(field.label)}</Label> */}\n              {this.renderLabel(field)}\n              <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                <Input\n                  type=\"textarea\"\n                  rows={7}\n                  className=\"square\"\n                  placeholder={this.translate(field.label)}\n                  onChange={(e) => this.updateState(field.name, e.target.value)}\n                />\n              </FormGroup>\n            </Col>\n          );\n        }\n\n        break;\n      case \"binary\":\n        res = (\n          <Col md=\"6\" key={field.name}>\n            {/* <Label>{this.translate(field.label)}</Label> */}\n            {this.renderLabel(field)}\n            <FormGroup className=\"form-label-group position-relative has-icon-left\">\n              <Input\n                type=\"file\"\n                className=\"square\"\n                placeholder={this.translate(field.label)}\n                onChange={(e) => {\n                  this.updateState(field.name, e.target.files[0]);\n                }}\n              />\n            </FormGroup>\n          </Col>\n        );\n\n        break;\n      case \"string\":\n        if (field[\"wq:ForeignKey\"]) {\n          res = (\n            <Col md=\"6\" key={field.name}>\n              {this.renderLabel(field)}\n\n              <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                <Select\n                  isClearable={true}\n                  className=\"rounded-0\"\n                  onChange={(e) => {\n                    this.updateState(`${field.name}_id`, e?.value);\n                    if (field[\"children\"] && e) {\n                      this.updateChildrenList(field, e);\n                    }\n\n                    if (field[\"children\"] && e === null) {\n                      this.clearChildrenList(field);\n                    }\n                  }}\n                  components={this.animatedComponents}\n                  options={this.selectOptions(\n                    field[\"has_parent\"] === undefined\n                      ? this.getForeignFieldDropdown(field[\"wq:ForeignKey\"]) ??\n                          []\n                      : this.state.childrens[field[\"wq:ForeignKey\"]] ?? []\n                  )}\n                />\n              </FormGroup>\n            </Col>\n          );\n        } else {\n          if (field[\"depends_on\"]) {\n            res = this.checkboxValue(field.depends_on) ? (\n              <Col md=\"6\" key={field.name}>\n                <>\n                  {this.renderLabel(field)}\n\n                  <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                    <Input\n                      type=\"text\"\n                      className=\"square\"\n                      placeholder={this.translate(field.label)}\n                      onChange={(e) =>\n                        this.updateState(field.name, e.target.value)\n                      }\n                    />\n                  </FormGroup>\n                </>\n              </Col>\n            ) : (\n              <div key={field.name} />\n            );\n          } else {\n            res = (\n              <Col md=\"6\" key={field.name}>\n                {this.renderLabel(field)}\n                <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                  <Input\n                    type=\"text\"\n                    className=\"square\"\n                    placeholder={this.translate(field.label)}\n                    onChange={(e) =>\n                      this.updateState(field.name, e.target.value)\n                    }\n                  />\n                </FormGroup>\n              </Col>\n            );\n          }\n        }\n\n        break;\n      case \"date\":\n        res = (\n          <Col md=\"6\" key={field.name}>\n            {this.renderLabel(field)}\n\n            <FormGroup className=\"form-label-group position-relative has-icon-left\">\n              <Input\n                type=\"date\"\n                className=\"square\"\n                placeholder={this.translate(field.label)}\n                onChange={(e) => this.updateState(field.name, e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n        );\n        break;\n      case \"int\":\n        if (field[\"depends_on\"]) {\n          res = this.checkboxValue(field.depends_on) ? (\n            <Col md=\"6\" key={field.name}>\n              {this.renderLabel(field)}\n\n              <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                <Input\n                  type=\"number\"\n                  className=\"square\"\n                  placeholder={this.translate(field.label)}\n                  onChange={(e) => this.updateState(field.name, e.target.value)}\n                />\n              </FormGroup>\n            </Col>\n          ) : (\n            <div key={field.name} />\n          );\n        } else {\n          res = (\n            <Col md=\"6\" key={field.name}>\n              {this.renderLabel(field)}\n\n              <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                <Input\n                  type=\"number\"\n                  className=\"square\"\n                  placeholder={this.translate(field.label)}\n                  onChange={(e) => this.updateState(field.name, e.target.value)}\n                />\n              </FormGroup>\n            </Col>\n          );\n        }\n        break;\n      case \"select one\":\n        if (field[\"has_boolean_options\"]) {\n          if (field[\"depends_on\"]) {\n            res = this.checkboxValue(field.depends_on) ? (\n              <Col md=\"6\" key={field.name} className=\"mb-1\">\n                <Checkbox\n                  color=\"primary\"\n                  className=\"my-2\"\n                  icon={<Check className=\"vx-icon\" size={16} />}\n                  label={<strong>{this.translate(field.label)}</strong>}\n                  defaultChecked={false}\n                  onChange={(e) =>\n                    this.updateState(\n                      field.name,\n                      !this.checkboxValue(field.name)\n                    )\n                  }\n                />\n              </Col>\n            ) : (\n              <Col md=\"6\" key={field.name} />\n            );\n          } else {\n            res = (\n              <Col md=\"6\" key={field.name} className=\"mb-1\">\n                <Checkbox\n                  color=\"primary\"\n                  className=\"my-2\"\n                  icon={<Check className=\"vx-icon\" size={16} />}\n                  label={<strong>{this.translate(field.label)}</strong>}\n                  defaultChecked={false}\n                  onChange={(e) =>\n                    this.updateState(\n                      field.name,\n                      !this.checkboxValue(field.name)\n                    )\n                  }\n                />\n              </Col>\n            );\n          }\n        } else {\n          if (field.depend_on_value) {\n            if (\n              field.depend_on_value.value.includes(\n                this.state.form.get(`${field.depend_on_value.field}_id`)\n              )\n            ) {\n              res = res = (\n                <Col md=\"6\" key={field.name}>\n                  {this.renderLabel(field)}\n\n                  <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                    <CustomInput\n                      className=\"square\"\n                      type=\"select\"\n                      id={field.name}\n                      placeholder={this.translate(field.label)}\n                      onChange={(e) =>\n                        this.updateState(field.name, e.target.value)\n                      }\n                    >\n                      <option>{this.translate(\"Select\")}</option>\n                      {this.renderSelectOption(field.choices)}\n                    </CustomInput>\n                  </FormGroup>\n                </Col>\n              );\n            } else return <Col md=\"6\" key={field.name} />;\n          } else {\n            if (field[\"depends_on\"]) {\n              res = this.checkboxValue(field.depends_on) ? (\n                <Col md=\"6\" key={field.name}>\n                  {this.renderLabel(field)}\n\n                  <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                    <CustomInput\n                      className=\"square\"\n                      type=\"select\"\n                      id={field.name}\n                      placeholder={this.translate(field.label)}\n                      onChange={(e) =>\n                        this.updateState(field.name, e.target.value)\n                      }\n                    >\n                      <option>{this.translate(\"Select\")}</option>\n                      {this.renderSelectOption(field.choices)}\n                    </CustomInput>\n                  </FormGroup>\n                </Col>\n              ) : (\n                <Col md=\"6\" key={field.name} />\n              );\n            } else {\n              res = (\n                <Col md=\"6\" key={field.name}>\n                  {this.renderLabel(field)}\n\n                  <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                    <CustomInput\n                      className=\"square\"\n                      type=\"select\"\n                      id={field.name}\n                      placeholder={this.translate(field.label)}\n                      onChange={(e) =>\n                        this.updateState(field.name, e.target.value)\n                      }\n                    >\n                      <option>{this.translate(\"Select\")}</option>\n                      {this.renderSelectOption(field.choices)}\n                    </CustomInput>\n                  </FormGroup>\n                </Col>\n              );\n            }\n          }\n        }\n        break;\n\n      default:\n        res = <div key={field.name}></div>;\n        break;\n    }\n\n    return res;\n  };\n\n  /**\n   * Reender a simple select option from a list\n   * @param {*} choices\n   * @returns\n   */\n  renderSelectOption = (choices) => {\n    return choices.map((item) => (\n      <option key={item.name} value={item.name}>\n        {this.translate(item.label)}\n      </option>\n    ));\n  };\n\n  /**\n   * Render a foreign key field dropdowns options on select component\n   * @param {*} choices\n   * @returns\n   */\n  renderSelectOptionForeignWQ = (choices) => {\n    return choices.map((item) => (\n      <option key={item.id} value={item.id}>\n        {this.translate(item.label)}\n      </option>\n    ));\n  };\n\n  /**\n   * Get foreign dropdowns from field_name on app dropdowns state\n   * @param {*} field_name\n   * @returns\n   */\n  getForeignFieldDropdown = (field_name) => {\n    return this.props.app_reducer.dropdowns[field_name] ?? [];\n  };\n\n  /**\n   * Add all fields and add the required fields into an array\n   * @param {*} field\n   */\n  addToRequired(field) {\n    const index = this.state.required_fields.indexOf(field.name);\n\n    /**\n     * Add all children dropdowns fiels in a map\n     */\n    if (field[\"children\"] !== undefined) {\n      let childrens = this.state.childrens;\n      childrens[field[\"children\"]] = [];\n      this.setState({ childrens });\n    }\n\n    if (field.bind !== undefined) {\n      if (field.bind.required === true && index <= 0) {\n        if (field.type === \"string\" && field[\"wq:ForeignKey\"]) {\n          this.state.required_fields.push(`${field.name}_id`);\n          this.state.required_fields_hs.push(`${field.name}_id`);\n        } else {\n          this.state.required_fields.push(field.name);\n          this.state.required_fields_hs.push(field.name);\n        }\n        this.state.required_fields_labels.push(field.label);\n      }\n    }\n  }\n\n  /**\n   * Remove field from required array if is the value is not null\n   * @param {*} field\n   */\n  removeFromRequired(field) {\n    const index = this.state.required_fields.indexOf(field);\n    if (index >= 0) {\n      this.state.required_fields.splice(index, 1);\n      this.state.required_fields_labels.splice(index, 1);\n    }\n  }\n\n  /**\n   * Add field from required array if is the value is null\n   * @param {*} field\n   */\n  addFromRequired(field) {\n    this.state.required_fields.push(field);\n  }\n\n  /**\n   * Update each dynamic field state value\n   * @param {*} field_name\n   * @param {*} value\n   */\n  updateState = (field_name, value) => {\n    let form = this.state.form;\n\n    if (value !== \"\" || value) {\n      if (form.has(field_name)) {\n        form.set(field_name, value);\n      } else {\n        form.append(field_name, value);\n      }\n\n      this.removeFromRequired(field_name);\n    }\n\n    if (!value && form.has(field_name)) {\n      form.delete(field_name);\n\n      if (this.state.required_fields_hs.includes(field_name))\n        this.addFromRequired(field_name);\n    }\n\n    this.setState({ form });\n  };\n\n  /**\n   * Dynimically places the nested fields into it's relative\n   * @param {*} field\n   * @param {*} value\n   */\n  updateChildrenList = (field, value) => {\n    let childrens = this.state.childrens;\n    let res = [];\n    if (field.has_parent) {\n      res = this.state.childrens[field[\"wq:ForeignKey\"]].filter((item) => {\n        return Number(item.id) === Number(value.value);\n      });\n      childrens[field.children] = res[0][`${field.children}_set`];\n      this.setState({ childrens });\n    } else {\n      res = this.props.app_reducer.dropdowns[field[\"wq:ForeignKey\"]].filter(\n        (item) => {\n          return Number(item.id) === Number(value.value);\n        }\n      );\n\n      childrens[field.children] = res[0][`${field.children}_set`];\n      this.setState({ childrens });\n    }\n  };\n\n  clearChildrenList = (field) => {\n    let { childrens } = this.state;\n    childrens[field.children] = [];\n    this.updateState(`${field.children}_id`, \"\");\n    this.setState({ childrens });\n  };\n\n  /**\n   * Format Select lib options from a list\n   *\n   * @param {*} list\n   * @returns\n   */\n  selectOptions = (list) =>\n    list.map((item) => {\n      return {\n        value: item.id,\n        label: this.translate(item.label),\n        color: \"#4287f5\",\n      };\n    });\n\n  /**\n   * Submits the form to post request action\n   */\n  handleSubmit = () => {\n    const { userOauth } = this.props.state.auth.login;\n    if (this.state.required_fields.length > 0) {\n      this.notifyErrorBounce(\"Fill all required inputs\");\n      this.setState({ isValid: false });\n    } else {\n      this.setState({ isValid: true });\n\n      const url = this.props.path === \"customuser\" ? \"user\" : this.props.path;\n      axios\n        .post(`${url}s.json`, this.state.form, {\n          headers: {\n            Authorization: `Bearer ${userOauth.access_token}`,\n          },\n        })\n        .then(({ data }) => {\n          this.notifySuccessBounce(data.id);\n          setTimeout(() => {\n            history.push(`/${this.props.url}`);\n          }, 1000);\n        })\n        .catch(({ error }) => {\n          this.notifyErrorBounce(\"Failed to save Object.\");\n        });\n    }\n  };\n\n  animatedComponents = makeAnimated();\n\n  /**\n   * Success alert function - shows an alert with success background\n   * @returns\n   */\n  notifySuccessBounce = () =>\n    toast.success(this.translate(`Transaction completed successfuly!`), {\n      transition: Bounce,\n    });\n\n  /**\n   * Error alert function - shows an alert with danger background\n   * @param {*} error - string message\n   * @returns\n   */\n  notifyErrorBounce = (error) =>\n    toast.error(this.translate(error), {\n      transition: Bounce,\n    });\n}\n\nfunction mapStateToProps(state) {\n  return {\n    state: state,\n    app_reducer: state.app.app_reducer,\n  };\n}\n\nexport default connect(mapStateToProps, { requestDropodowns })(Create);\n"],"sourceRoot":""}