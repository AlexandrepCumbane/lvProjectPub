{"version":3,"sources":["views/app/create.js"],"names":["Create","translate","context","animatedComponents","makeAnimated","state","form","FormData","required_fields_hs","required_fields","required_fields_labels","editorState","EditorState","createEmpty","isValid","dropdowns","childrens","showAlert","alertFields","alertData","renderFieldAlert","config","pages","props","path","className","ref","color","isOpen","toggle","setState","map","item","index","field","find","el","name","key","label","onEditorStateChange","renderForm","form_","md","verbose_name","renderSingleInput","Ripple","type","onClick","e","handleSubmit","checkboxValue","field_name","get","renderLabel","includes","undefined","bind","required","res","console","log","wrapperClassName","editorClassName","onChange","updateState","draftToHtml","toolbar","options","size","rows","placeholder","target","value","files","isClearable","updateChildrenList","clearChildrenList","components","selectOptions","getForeignFieldDropdown","depends_on","icon","defaultChecked","depend_on_value","id","renderSelectOption","choices","renderSelectOptionForeignWQ","app_reducer","has","set","append","removeFromRequired","delete","addFromRequired","has_parent","filter","Number","children","list","userOauth","auth","login","length","notifyErrorBounce","url","axios","post","headers","Authorization","access_token","then","data","notifySuccessBounce","setTimeout","history","push","catch","response","Object","keys","toast","success","transition","Bounce","error","this","requestDropodowns","forEach","addToRequired","indexOf","splice","React","Component","contextType","IntlContext","connect","app"],"mappings":"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","file":"static/js/10.2cadd6b1.chunk.js","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { toast, Bounce } from \"react-toastify\";\n\nimport Select from \"react-select\";\nimport makeAnimated from \"react-select/animated\";\n\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\n\nimport { requestDropodowns } from \"../../redux/actions/app/actions\";\nimport { IntlContext } from \"../../i18n/provider\";\nimport { history } from \"../../history\";\nimport { axios } from \"../../redux/api\";\n\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\nimport \"../../assets/scss/plugins/extensions/editor.scss\";\n\nimport config from \"../../data/config\";\nimport {\n  Alert,\n  Button,\n  Card,\n  CardBody,\n  Row,\n  Col,\n  FormGroup,\n  CustomInput,\n  Input,\n  Label,\n} from \"reactstrap\";\nimport { Check } from \"react-feather\";\n\nimport Checkbox from \"../../components/@vuexy/checkbox/CheckboxesVuexy\";\n\nclass Create extends React.Component {\n  static contextType = IntlContext;\n  translate = this.context.translate;\n\n  animatedComponents = makeAnimated();\n\n  state = {\n    form: new FormData(),\n    required_fields_hs: [],\n    required_fields: [],\n    required_fields_labels: [],\n    editorState: EditorState.createEmpty(),\n    isValid: true,\n    dropdowns: [],\n    childrens: {},\n\n    showAlert: false,\n    alertFields: [],\n    alertData: {}\n  };\n\n  componentDidMount() {\n    this.props.requestDropodowns(); // Request dropdown lists and place in a map\n    const { form } = config.pages[this.props.path]; // loads lvform to be rendered on view\n    form.forEach((item, index) => {\n      this.addToRequired(item);\n    });\n    const { dropdowns } = this.props.app_reducer;\n    this.setState({ dropdowns });\n  }\n\n  render() {\n    return (\n      <div>\n        <Card className=\"rounded-0 mb-0 px-2\">\n          <CardBody>\n            <div>\n                {this.renderFieldAlert()}\n            </div>\n            {this.renderForm()}\n            </CardBody>\n        </Card>\n      </div>\n    );\n  }\n\n  renderFieldAlert = () => {\n\n    const { showAlert, alertData, alertFields } = this.state;\n    const { form } = config.pages[this.props.path];\n  \n    return <Alert className=\"rounded-0\" ref=\"alertFocus\" color='danger' isOpen={ showAlert} toggle={() => this.setState({ showAlert: false })}>\n        { alertFields?.map((item, index) => {\n  \n          const field = form.find(el => el.name === item)\n          return (<div className='alert-body' key={index}>\n            {`${this.translate(field?.label ?? item )}: ${this.translate(alertData[field?.name ?? item])}` }\n          </div>)\n  \n        })}\n      </Alert>\n    }\n\n  onEditorStateChange = (editorState) => {\n    this.setState({ editorState });\n  };\n\n  /**\n   * Action and helper functions\n   */\n  renderForm = () => {\n    const form_ = config.pages[this.props.path];\n\n    return (\n      <Row>\n        <Col md=\"12\">\n          <h4>{this.translate(form_.verbose_name)}</h4>\n          <hr />\n        </Col>\n\n        {form_.form.map((field) => this.renderSingleInput(field))}\n\n        <Col md=\"12\">\n          <div className=\"d-flex justify-content-between\">\n            <div />\n            <Button.Ripple\n              className=\"square\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={(e) => this.handleSubmit()}\n            >\n              {this.translate(\"Submit\")}\n            </Button.Ripple>\n          </div>\n        </Col>\n      </Row>\n    );\n  };\n\n  /**\n   * get checkbox field value from a formdata object\n   * @param {*} field_name\n   * @returns\n   */\n  checkboxValue = (field_name) => {\n    const { form } = this.state;\n    if (form.get(field_name) === \"true\") {\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * Render a input label verifying it's required bind value and filled value\n   * @param {*} field\n   * @returns\n   */\n  renderLabel = (field) => {\n    if (\n      (!this.state.isValid &&\n        this.state.required_fields_labels.includes(field.label)) ||\n      (!this.state.isValid &&\n        this.state.required_fields.includes(`${field.name}_id`))\n    ) {\n      return (\n        <Label className=\"text-danger\">\n          <strong>* {this.translate(field.label)}</strong>\n        </Label>\n      );\n    } else {\n      if (field.bind !== undefined) {\n        if (field.bind.required === true) {\n          if (this.state.required_fields_labels.includes(field.label))\n            return (\n              <Label className=\"text-danger\">\n                <strong> * {this.translate(field.label)}</strong>\n              </Label>\n            );\n          else {\n            return (\n              <Label>\n                <strong>* {this.translate(field.label)}</strong>\n              </Label>\n            );\n          }\n        } else {\n          return (\n            <Label>\n              <strong> {this.translate(field.label)}</strong>\n            </Label>\n          );\n        }\n      } else {\n        return (\n          <Label>\n            <strong> {this.translate(field.label)}</strong>\n          </Label>\n        );\n      }\n    }\n  };\n\n  /**\n   * Filter and matchs input type and render it's matching components settings\n   * @param {*} field\n   * @returns\n   */\n  renderSingleInput = (field) => {\n    let res = <></>;\n\n    console.log(this.props.path)\n\n    if (\n      field.name === \"case_number\" ||\n      field.name === \"created_by\" ||\n      field.name === \"othercategory\" ||\n      field.name === \"month\" ||\n      field.name === \"id\" ||\n      field.name === \"response\"\n    ) {\n      return <span key={field.name} />;\n    }\n\n    switch (field.type) {\n      case \"text\":\n        if (field.name === \"text\" && this.props.path === \"article\") {\n          res = (\n            <Col md=\"12\" key={field.name}>\n              {this.renderLabel(field)}\n\n              <Editor\n                wrapperClassName=\"demo-wrapper\"\n                editorClassName=\"demo-editor\"\n                editorState={this.state.editorState}\n                onEditorStateChange={this.onEditorStateChange}\n                onChange={(e) => this.updateState(field.name, draftToHtml(e))}\n                toolbar={{\n                  options: [\n                    \"inline\",\n                    \"blockType\",\n                    \"fontSize\",\n                    \"fontFamily\",\n                    \"list\",\n                    \"textAlign\",\n                    \"colorPicker\",\n                    \"link\",\n                    \"embedded\",\n                    \"emoji\",\n                    \"image\",\n                    \"remove\",\n                    \"history\",\n                  ],\n                }}\n              />\n            </Col>\n          );\n        } else {\n          const size = field.name === \"text\" ? 12 : 6;\n          res = (\n            <Col md={size} key={field.name}>\n              {/* <Label>{this.translate(field.label)}</Label> */}\n              {this.renderLabel(field)}\n              <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                <Input\n                  type=\"textarea\"\n                  rows={7}\n                  className=\"square\"\n                  placeholder={this.translate(field.label)}\n                  onChange={(e) => this.updateState(field.name, e.target.value)}\n                />\n              </FormGroup>\n            </Col>\n          );\n        }\n\n        break;\n      case \"binary\":\n        res = (\n          <Col md=\"6\" key={field.name}>\n            {/* <Label>{this.translate(field.label)}</Label> */}\n            {this.renderLabel(field)}\n            <FormGroup className=\"form-label-group position-relative has-icon-left\">\n              <Input\n                type=\"file\"\n                className=\"square\"\n                placeholder={this.translate(field.label)}\n                onChange={(e) => {\n                  this.updateState(field.name, e.target.files[0]);\n                }}\n              />\n            </FormGroup>\n          </Col>\n        );\n\n        break;\n      case \"string\":\n        if (field[\"wq:ForeignKey\"]) {\n          res = (\n            <Col md=\"6\" key={field.name}>\n              {this.renderLabel(field)}\n\n              <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                <Select\n                  isClearable={true}\n                  className=\"rounded-0\"\n                  onChange={(e) => {\n                    this.updateState(`${field.name}_id`, e?.value);\n                    if (field[\"children\"] && e) {\n                      this.updateChildrenList(field, e);\n                    }\n\n                    if (field[\"children\"] && e === null) {\n                      this.clearChildrenList(field);\n                    }\n                  }}\n                  components={this.animatedComponents}\n                  options={this.selectOptions(\n                    field[\"has_parent\"] === undefined\n                      ? this.getForeignFieldDropdown(field[\"wq:ForeignKey\"]) ??\n                          []\n                      : this.state.childrens[field[\"wq:ForeignKey\"]] ?? []\n                  )}\n                />\n              </FormGroup>\n            </Col>\n          );\n        } else {\n          if (field[\"depends_on\"]) {\n            res = this.checkboxValue(field.depends_on) ? (\n              <Col md=\"6\" key={field.name}>\n                <>\n                  {this.renderLabel(field)}\n\n                  <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                    <Input\n                      type=\"text\"\n                      className=\"square\"\n                      placeholder={this.translate(field.label)}\n                      onChange={(e) =>\n                        this.updateState(field.name, e.target.value)\n                      }\n                    />\n                  </FormGroup>\n                </>\n              </Col>\n            ) : (\n              <div key={field.name} />\n            );\n          } else {\n            res = (\n              <Col md=\"6\" key={field.name}>\n                {this.renderLabel(field)}\n                <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                  <Input\n                    type=\"text\"\n                    className=\"square\"\n                    placeholder={this.translate(field.label)}\n                    onChange={(e) =>\n                      this.updateState(field.name, e.target.value)\n                    }\n                  />\n                </FormGroup>\n              </Col>\n            );\n          }\n        }\n\n        break;\n      case \"date\":\n        res = (\n          <Col md=\"6\" key={field.name}>\n            {this.renderLabel(field)}\n\n            <FormGroup className=\"form-label-group position-relative has-icon-left\">\n              <Input\n                type=\"date\"\n                className=\"square\"\n                placeholder={this.translate(field.label)}\n                onChange={(e) => this.updateState(field.name, e.target.value)}\n              />\n            </FormGroup>\n          </Col>\n        );\n        break;\n      case \"int\":\n        if (field[\"depends_on\"]) {\n          res = this.checkboxValue(field.depends_on) ? (\n            <Col md=\"6\" key={field.name}>\n              {this.renderLabel(field)}\n\n              <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                <Input\n                  type=\"number\"\n                  className=\"square\"\n                  placeholder={this.translate(field.label)}\n                  onChange={(e) => this.updateState(field.name, e.target.value)}\n                />\n              </FormGroup>\n            </Col>\n          ) : (\n            <div key={field.name} />\n          );\n        } else {\n          res = (\n            <Col md=\"6\" key={field.name}>\n              {this.renderLabel(field)}\n\n              <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                <Input\n                  type=\"number\"\n                  className=\"square\"\n                  placeholder={this.translate(field.label)}\n                  onChange={(e) => this.updateState(field.name, e.target.value)}\n                />\n              </FormGroup>\n            </Col>\n          );\n        }\n        break;\n      case \"select one\":\n        if (field[\"has_boolean_options\"]) {\n          if (field[\"depends_on\"]) {\n            res = this.checkboxValue(field.depends_on) ? (\n              <Col md=\"6\" key={field.name} className=\"mb-1\">\n                <Checkbox\n                  color=\"primary\"\n                  className=\"my-2\"\n                  icon={<Check className=\"vx-icon\" size={16} />}\n                  label={<strong>{this.translate(field.label)}</strong>}\n                  defaultChecked={false}\n                  onChange={(e) =>\n                    this.updateState(\n                      field.name,\n                      !this.checkboxValue(field.name)\n                    )\n                  }\n                />\n              </Col>\n            ) : (\n              <Col md=\"6\" key={field.name} />\n            );\n          } else {\n            res = (\n              <Col md=\"6\" key={field.name} className=\"mb-1\">\n                <Checkbox\n                  color=\"primary\"\n                  className=\"my-2\"\n                  icon={<Check className=\"vx-icon\" size={16} />}\n                  label={<strong>{this.translate(field.label)}</strong>}\n                  defaultChecked={false}\n                  onChange={(e) =>\n                    this.updateState(\n                      field.name,\n                      !this.checkboxValue(field.name)\n                    )\n                  }\n                />\n              </Col>\n            );\n          }\n        } else {\n          if (field.depend_on_value) {\n            if (\n              field.depend_on_value.value.includes(\n                this.state.form.get(`${field.depend_on_value.field}_id`)\n              )\n            ) {\n              res = res = (\n                <Col md=\"6\" key={field.name}>\n                  {this.renderLabel(field)}\n\n                  <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                    <CustomInput\n                      className=\"square\"\n                      type=\"select\"\n                      id={field.name}\n                      placeholder={this.translate(field.label)}\n                      onChange={(e) =>\n                        this.updateState(field.name, e.target.value)\n                      }\n                    >\n                      <option>{this.translate(\"Select\")}</option>\n                      {this.renderSelectOption(field.choices)}\n                    </CustomInput>\n                  </FormGroup>\n                </Col>\n              );\n            } else return <Col md=\"6\" key={field.name} />;\n          } else {\n            if (field[\"depends_on\"]) {\n              res = this.checkboxValue(field.depends_on) ? (\n                <Col md=\"6\" key={field.name}>\n                  {this.renderLabel(field)}\n\n                  <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                    <CustomInput\n                      className=\"square\"\n                      type=\"select\"\n                      id={field.name}\n                      placeholder={this.translate(field.label)}\n                      onChange={(e) =>\n                        this.updateState(field.name, e.target.value)\n                      }\n                    >\n                      <option>{this.translate(\"Select\")}</option>\n                      {this.renderSelectOption(field.choices)}\n                    </CustomInput>\n                  </FormGroup>\n                </Col>\n              ) : (\n                <Col md=\"6\" key={field.name} />\n              );\n            } else {\n              res = (\n                <Col md=\"6\" key={field.name}>\n                  {this.renderLabel(field)}\n\n                  <FormGroup className=\"form-label-group position-relative has-icon-left\">\n                    <CustomInput\n                      className=\"square\"\n                      type=\"select\"\n                      id={field.name}\n                      placeholder={this.translate(field.label)}\n                      onChange={(e) =>\n                        this.updateState(field.name, e.target.value)\n                      }\n                    >\n                      <option>{this.translate(\"Select\")}</option>\n                      {this.renderSelectOption(field.choices)}\n                    </CustomInput>\n                  </FormGroup>\n                </Col>\n              );\n            }\n          }\n        }\n        break;\n\n      default:\n        res = <div key={field.name}></div>;\n        break;\n    }\n\n    return res;\n  };\n\n  /**\n   * Reender a simple select option from a list\n   * @param {*} choices\n   * @returns\n   */\n  renderSelectOption = (choices) => {\n    return choices.map((item) => (\n      <option key={item.name} value={item.name}>\n        {this.translate(item.label)}\n      </option>\n    ));\n  };\n\n  /**\n   * Render a foreign key field dropdowns options on select component\n   * @param {*} choices\n   * @returns\n   */\n  renderSelectOptionForeignWQ = (choices) => {\n    return choices.map((item) => (\n      <option key={item.id} value={item.id}>\n        {this.translate(item.label)}\n      </option>\n    ));\n  };\n\n  /**\n   * Get foreign dropdowns from field_name on app dropdowns state\n   * @param {*} field_name\n   * @returns\n   */\n  getForeignFieldDropdown = (field_name) => {\n    return this.props.app_reducer.dropdowns[field_name] ?? [];\n  };\n\n  /**\n   * Add all fields and add the required fields into an array\n   * @param {*} field\n   */\n  addToRequired(field) {\n    const index = this.state.required_fields.indexOf(field.name);\n\n    /**\n     * Add all children dropdowns fiels in a map\n     */\n    if (field[\"children\"] !== undefined) {\n      let childrens = this.state.childrens;\n      childrens[field[\"children\"]] = [];\n      this.setState({ childrens });\n    }\n\n    if (field.bind !== undefined) {\n      if (field.bind.required === true && index <= 0) {\n        if (field.type === \"string\" && field[\"wq:ForeignKey\"]) {\n          this.state.required_fields.push(`${field.name}_id`);\n          this.state.required_fields_hs.push(`${field.name}_id`);\n        } else {\n          this.state.required_fields.push(field.name);\n          this.state.required_fields_hs.push(field.name);\n        }\n        this.state.required_fields_labels.push(field.label);\n      }\n    }\n  }\n\n  /**\n   * Remove field from required array if is the value is not null\n   * @param {*} field\n   */\n  removeFromRequired(field) {\n    const index = this.state.required_fields.indexOf(field);\n    if (index >= 0) {\n      this.state.required_fields.splice(index, 1);\n      this.state.required_fields_labels.splice(index, 1);\n    }\n  }\n\n  /**\n   * Add field from required array if is the value is null\n   * @param {*} field\n   */\n  addFromRequired(field) {\n    this.state.required_fields.push(field);\n  }\n\n  /**\n   * Update each dynamic field state value\n   * @param {*} field_name\n   * @param {*} value\n   */\n  updateState = (field_name, value) => {\n    let form = this.state.form;\n\n    if (value !== \"\" || value) {\n      if (form.has(field_name)) {\n        form.set(field_name, value);\n      } else {\n        form.append(field_name, value);\n      }\n\n      this.removeFromRequired(field_name);\n    }\n\n    if (!value && form.has(field_name)) {\n      form.delete(field_name);\n\n      if (this.state.required_fields_hs.includes(field_name))\n        this.addFromRequired(field_name);\n    }\n\n    this.setState({ form });\n  };\n\n  /**\n   * Dynimically places the nested fields into it's relative\n   * @param {*} field\n   * @param {*} value\n   */\n  updateChildrenList = (field, value) => {\n    let childrens = this.state.childrens;\n    let res = [];\n    if (field.has_parent) {\n      res = this.state.childrens[field[\"wq:ForeignKey\"]].filter((item) => {\n        return Number(item.id) === Number(value.value);\n      });\n      childrens[field.children] = res[0][`${field.children}_set`];\n      this.setState({ childrens });\n    } else {\n      res = this.props.app_reducer.dropdowns[field[\"wq:ForeignKey\"]].filter(\n        (item) => {\n          return Number(item.id) === Number(value.value);\n        }\n      );\n\n      childrens[field.children] = res[0][`${field.children}_set`];\n      this.setState({ childrens });\n    }\n  };\n\n  clearChildrenList = (field) => {\n    let { childrens } = this.state;\n    childrens[field.children] = [];\n    this.updateState(`${field.children}_id`, \"\");\n    this.setState({ childrens });\n  };\n\n  /**\n   * Format Select lib options from a list\n   *\n   * @param {*} list\n   * @returns\n   */\n  selectOptions = (list) =>\n    list.map((item) => {\n      return {\n        value: item.id,\n        label: this.translate(item.label),\n        color: \"#4287f5\",\n      };\n    });\n\n  /**\n   * Submits the form to post request action\n   */\n  handleSubmit = () => {\n    const { userOauth } = this.props.state.auth.login;\n    if (this.state.required_fields.length > 0) {\n      this.notifyErrorBounce(\"Fill all required inputs\");\n      this.setState({ isValid: false });\n    } else {\n      this.setState({ isValid: true });\n\n      const url = this.props.path === \"customuser\" ? \"user\" : this.props.path;\n      axios\n        .post(`${url}s.json`, this.state.form, {\n          headers: {\n            Authorization: `Bearer ${userOauth.access_token}`,\n          },\n        })\n        .then(({ data }) => {\n          this.notifySuccessBounce(data.id);\n          setTimeout(() => {\n            history.push(`/${this.props.url}`);\n          }, 1000);\n        })\n        .catch(({ response }) => {\n          this.notifyErrorBounce(\"Failed to save Object.\");\n\n          this.setState({\n            alertFields: Object.keys(response.data) ?? [],\n            alertData: response.data,\n            showAlert: true\n          })\n        });\n    }\n  };\n\n  animatedComponents = makeAnimated();\n\n  /**\n   * Success alert function - shows an alert with success background\n   * @returns\n   */\n  notifySuccessBounce = () =>\n    toast.success(this.translate(`Transaction completed successfuly!`), {\n      transition: Bounce,\n    });\n\n  /**\n   * Error alert function - shows an alert with danger background\n   * @param {*} error - string message\n   * @returns\n   */\n  notifyErrorBounce = (error) =>\n    toast.error(this.translate(error), {\n      transition: Bounce,\n    });\n}\n\nfunction mapStateToProps(state) {\n  return {\n    state: state,\n    app_reducer: state.app.app_reducer,\n  };\n}\n\nexport default connect(mapStateToProps, { requestDropodowns })(Create);\n"],"sourceRoot":""}